require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe JobApplicationsController, type: :controller do
  login_admin

  let(:job_application_form) { FactoryGirl.create(:job_application_form) }
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:job_application, job_application_form_id: job_application_form.id, applicant_type: "Current University Student")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # JobApplicationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all job_applications as @job_applications" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(assigns(:job_applications)).to eq([job_application])
    end
  end

  describe "GET #index as student" do
    login_student
    it "assigns all job_applications as @job_applications" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(response).to be_success
    end
  end

  describe "GET #index as super admin" do
    login_superadmin
    it "assigns all job_applications as @job_applications" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(response).to be_success
    end
  end

  describe "GET #index as admin" do
    login_admin
    it "assigns all job_applications as @job_applications" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(response).to be_success
    end
  end

  describe "GET #index user not logged in" do
    it "assigns all job_applications as @job_applications" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(response).to be_success
    end
  end

  describe "xls #index" do
    it "download xls file" do
      job_application = JobApplication.create! valid_attributes
      get :index, { job_application_form_id: job_application_form.to_param }, valid_session, format: :xls
      expect(response).to be_success
    end
  end

  describe "GET #show" do
    it "assigns the requested job_application as @job_application" do
      job_application = JobApplication.create! valid_attributes
      get :show, {id: job_application.to_param, job_application_form_id: job_application_form.to_param }, valid_session
      expect(assigns(:job_application)).to eq(job_application)
    end
  end

  describe "GET #new" do
    it "assigns a new job_application as @job_application" do
      get :new, { job_application_form_id: job_application_form.to_param }, valid_session
      expect(assigns(:job_application)).to be_a_new(JobApplication)
    end
  end

  describe "GET #edit" do
    it "assigns the requested job_application as @job_application" do
      job_application = JobApplication.create! valid_attributes
      get :edit, { id: job_application.to_param,
                   job_application_form_id: job_application_form.to_param }, valid_session
      expect(assigns(:job_application)).to eq(job_application)
    end
  end

  xdescribe "POST #create" do
    context "with valid params" do
      it "creates a new JobApplication" do
        expect {
          post :create, { job_application: valid_attributes,
                          job_application_form_id: job_application_form.to_param }, valid_session
        }.to change(JobApplication, :count).by(1)
        expect {JobApplicationMailer.student_job_application(job_application)}.to be_success
      end

      it "assigns a newly created job_application as @job_application" do
        post :create, { job_application: valid_attributes,
                          job_application_form_id: job_application_form.to_param }, valid_session
        expect(assigns(:job_application)).to be_a(JobApplication)
        expect(assigns(:job_application)).to be_persisted
      end

      it "redirects to the created job_application" do
        post :create, { job_application: valid_attributes,
                          job_application_form_id: job_application_form.to_param }, valid_session
        expect(response).to redirect_to(available_positions_job_application_forms_path)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved job_application as @job_application" do
        post :create, {:job_application => invalid_attributes}, valid_session
        expect(assigns(:job_application)).to be_a_new(JobApplication)
      end

      it "re-renders the 'new' template" do
        post :create, {:job_application => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        FactoryGirl.attributes_for(:job_application, name: 'Jane Doo',
                                    email: "jd@test.com", phone_number: '9874563210')
      }

      it "updates the requested job_application" do
        job_application = JobApplication.create! valid_attributes
        put :update, { id: job_application.to_param, job_application: new_attributes,
                       job_application_form_id: job_application_form.to_param }, valid_session
        job_application.reload
        expect(job_application.name).to eq('Jane Doo')
        expect(job_application.email).to eq('jd@test.com')
        expect(job_application.phone_number).to eq('9874563210')
      end

      it "assigns the requested job_application as @job_application" do
        job_application = JobApplication.create! valid_attributes
        put :update, { id: job_application.to_param, job_application: valid_attributes,
                        job_application_form_id: job_application_form.to_param }, valid_session
        expect(assigns(:job_application)).to eq(job_application)
      end

      it "redirects to the job_applications" do
        job_application = JobApplication.create! valid_attributes
        put :update, { id: job_application.to_param, job_application: new_attributes,
                        job_application_form_id: job_application_form.to_param }, valid_session
        expect(response).to redirect_to(job_application_form_job_application_path)
      end
    end

    context "with invalid params" do
      it "assigns the job_application as @job_application" do
        job_application = JobApplication.create! valid_attributes
        put :update, {:id => job_application.to_param, :job_application => invalid_attributes}, valid_session
        expect(assigns(:job_application)).to eq(job_application)
      end

      it "re-renders the 'edit' template" do
        job_application = JobApplication.create! valid_attributes
        put :update, {:id => job_application.to_param, :job_application => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested job_application" do
      job_application = JobApplication.create! valid_attributes
      expect {
        delete :destroy, { id: job_application.to_param, job_application_form_id: job_application_form }, valid_session
      }.to change(JobApplication, :count).by(-1)
    end


    it "redirects to the job_applications list" do
      job_application = JobApplication.create! valid_attributes
      delete :destroy, { id: job_application.to_param, job_application_form_id: job_application_form.to_param}, valid_session
      expect(response).to redirect_to(job_application_form_job_applications_path(job_application_form))
    end
  end

  describe "GET #download_all" do
    before do
      @job_application = JobApplication.create! valid_attributes
      get :download_all, { job_application_form_id: job_application_form.to_param }, valid_session
    end
    it "download all job applications in zip" do
      expect(controller.headers['Content-Type']).to eq("application/zip")
      expect(controller.headers['Content-Disposition']).to eq("attachment; filename=\"#{job_application_form.title} - Applications - #{Date.today.to_s}.zip\"")
    end
  end

end
