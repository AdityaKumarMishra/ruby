require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TutorAvailabilitiesController, type: :controller do
  login_tutor
  # This should return the minimal set of attributes required to create a valid
  # TutorAvailability. As you add validations to TutorAvailability, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:tutor_availability, start_time: DateTime.now.next_day(1),
                               end_time: DateTime.now.next_day(2) + 1.hour + 10.minute,
                               location: FFaker::Lorem.word,
                               status: 0,
                               tutor_profile_id: subject.current_user.tutor_profile.id,
                               tutor_schedule_id: subject.current_user.tutor_schedules.last&.id,
                               repeatability: 1
                               )
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:tutor_availability, start_time: DateTime.now.next_day(1),
                               end_time: DateTime.now,
                               location: FFaker::Lorem.word,
                               tutor_profile_id: subject.current_user.tutor_profile.id,
                               repeatability: 1
    )
  }

  describe "GET #index" do
    before do
      TutorAvailability.destroy_all
    end

    it "assigns all tutor_availabilities as @tutor_availabilities" do
      tutor_availability = TutorAvailability.create! valid_attributes
      get :index, params: {}
      expect(assigns(:tutor_availabilities).to_a).to eq([tutor_availability])
    end
  end

  describe "GET #show" do
    it "assigns the requested tutor_availability as @tutor_availability" do
      tutor_availability = TutorAvailability.create! valid_attributes
      get :show, params: {:id => tutor_availability.to_param}
      expect(assigns(:tutor_availability)).to eq(tutor_availability)
    end
  end

  describe "GET #new" do
    it "assigns a new tutor_availability as @tutor_availability" do
      get :new, params: {}
      expect(assigns(:tutor_availability)).to be_a_new(TutorAvailability)
    end
  end

  describe "GET #edit" do
    it "assigns the requested tutor_availability as @tutor_availability" do
      tutor_availability = TutorAvailability.create! valid_attributes
      get :edit, params: {:id => tutor_availability.to_param}
      expect(assigns(:tutor_availability)).to eq(tutor_availability)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new TutorAvailability" do
        expect {
          post :create, params: {:tutor_availability => valid_attributes}
        }.to change(TutorAvailability, :count).by(1)
      end

      it "assigns a newly created tutor_availability as @tutor_availability" do
        post :create, params: {:tutor_availability => valid_attributes}
        expect(assigns(:tutor_availability)).to be_a(TutorAvailability)
        expect(assigns(:tutor_availability)).to be_persisted
      end

      it "redirects to the created tutor_availability" do
        post :create, params: {:tutor_availability => valid_attributes}
        expect(response).to redirect_to(TutorAvailability.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved tutor_availability as @tutor_availability" do
        post :create, params: { tutor_availability: invalid_attributes }
        expect(assigns(:tutor_availability)).to be_a_new(TutorAvailability)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:tutor_availability => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {
          location: FFaker::Lorem.word,
          repeatability: 2
        }
      }

      it "updates the requested tutor_availability" do
        tutor_availability = TutorAvailability.create! valid_attributes
        put :update, params: {:id => tutor_availability.to_param, :tutor_availability => new_attributes}
        tutor_availability.reload

        expect(tutor_availability.location).to eq(new_attributes[:location])
        expect(tutor_availability.repeatability).to eq('weekly')
      end

      it "assigns the requested tutor_availability as @tutor_availability" do
        tutor_availability = TutorAvailability.create! valid_attributes
        put :update, params: {:id => tutor_availability.to_param, :tutor_availability => valid_attributes}
        expect(assigns(:tutor_availability)).to eq(tutor_availability)
      end

      it "redirects to the tutor_availability" do
        tutor_availability = TutorAvailability.create! valid_attributes
        put :update, params: {:id => tutor_availability.to_param, :tutor_availability => valid_attributes}
        expect(response).to redirect_to(tutor_availability)
      end
    end

    context "with invalid params" do
      it "assigns the tutor_availability as @tutor_availability" do
        tutor_availability = TutorAvailability.create! valid_attributes
        put :update, params: {:id => tutor_availability.to_param, :tutor_availability => invalid_attributes}
        expect(assigns(:tutor_availability)).to eq(tutor_availability)
      end

      it "re-renders the 'edit' template" do
        tutor_availability = TutorAvailability.create! valid_attributes
        put :update, params: {:id => tutor_availability.to_param, :tutor_availability => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested tutor_availability" do
      tutor_availability = TutorAvailability.create! valid_attributes
      expect {
        delete :destroy, params: {:id => tutor_availability.to_param}
      }.not_to change(TutorAvailability, :count)
    end

    it "redirects to the tutor_availabilities list" do
      tutor_availability = TutorAvailability.create! valid_attributes
      delete :destroy, params: {:id => tutor_availability.to_param}
      expect(response).to redirect_to(tutor_availability_path(tutor_availability.id))
    end
  end

end
