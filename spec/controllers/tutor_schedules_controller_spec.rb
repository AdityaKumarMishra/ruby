require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TutorSchedulesController, type: :controller do
  login_tutor
  let(:valid_attributes) do
    {
      start_time: DateTime.now.next_day(2) + 1.day,
      end_time: DateTime.now.next_day(2) + 5.days,
      repeatability: :once_off,
      tutor_profile_id: subject.current_user.tutor_profile.id
    }
  end

  let(:invalid_attributes) do
    {
      start_time: DateTime.now.next_day(2) + 1.day,
      end_time: DateTime.now.next_day(2) - 1.days,
      repeatability: :weekly,
      tutor_profile_id: subject.current_user.tutor_profile.id
    }
  end

  describe "GET #index" do
    it "assigns all tutor_schedules as @tutor_schedules" do
      tutor_schedule = TutorSchedule.create! valid_attributes
      get :index, params: {}
      expect(assigns(:tutor_schedules)).to eq([subject.current_user.tutor_schedules.first, tutor_schedule])
    end
  end

  describe "GET #show" do
    it "assigns the requested tutor_schedule as @tutor_schedule" do
      tutor_schedule = TutorSchedule.create! valid_attributes
      get :show, params: {:id => tutor_schedule.to_param}
      expect(assigns(:tutor_schedule)).to eq(tutor_schedule)
    end
  end

  describe "GET #new" do
    it "assigns a new tutor_schedule as @tutor_schedule" do
      get :new, params: {}
      expect(assigns(:tutor_schedule)).to be_a_new(TutorSchedule)
    end
  end

  describe "GET #edit" do
    it "assigns the requested tutor_schedule as @tutor_schedule" do
      tutor_schedule = TutorSchedule.create! valid_attributes
      get :edit, params: {:id => tutor_schedule.to_param}
      expect(assigns(:tutor_schedule)).to eq(tutor_schedule)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new TutorSchedule" do
        expect {
          post :create, params: {:tutor_schedule => valid_attributes}
        }.to change(TutorSchedule, :count).by(1)
      end

      it "assigns a newly created tutor_schedule as @tutor_schedule" do
        post :create, params: {:tutor_schedule => valid_attributes}
        expect(assigns(:tutor_schedule)).to be_a(TutorSchedule)
        expect(assigns(:tutor_schedule)).to be_persisted
      end

      it "redirects to the created tutor_schedule" do
        post :create, params: {:tutor_schedule => valid_attributes}
        expect(response).to redirect_to(dashboard_count_tutor_appointments_path(selection: 'Log Hours'))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved tutor_schedule as @tutor_schedule" do
        post :create, params: {:tutor_schedule => invalid_attributes}
        expect(assigns(:tutor_schedule)).to be_a_new(TutorSchedule)
      end

      it "re-renders the 'new' template" do
        post :create, params: {:tutor_schedule => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) do
        {
          start_time: DateTime.now.next_day(2).in_time_zone('Australia/Sydney') + 10.day,
          end_time: DateTime.now.next_day(2).in_time_zone('Australia/Sydney') + 15.days,
          repeatability: :weekly,
        }
      end

      it "updates the requested tutor_schedule" do
        tutor_schedule = TutorSchedule.create! valid_attributes
        put :update, params: {:id => tutor_schedule.to_param, :tutor_schedule => new_attributes}

        expect(tutor_schedule.reload.start_time.to_s).to eq(new_attributes[:start_time].to_s)
        expect(tutor_schedule.reload.end_time.to_s).to eq(new_attributes[:end_time].to_s)
        expect(tutor_schedule.reload.repeatability).to eq(new_attributes[:repeatability].to_s)
      end

      it "assigns the requested tutor_schedule as @tutor_schedule" do
        tutor_schedule = TutorSchedule.create! valid_attributes
        put :update, params: {:id => tutor_schedule.to_param, :tutor_schedule => valid_attributes}
        expect(assigns(:tutor_schedule)).to eq(tutor_schedule)
      end

      it "redirects to the tutor_schedule" do
        tutor_schedule = TutorSchedule.create! valid_attributes
        put :update, params: {:id => tutor_schedule.to_param, :tutor_schedule => valid_attributes}
        expect(response).to redirect_to(dashboard_count_tutor_appointments_path(selection: 'Log Hours'))
      end
    end

    context "with invalid params" do
      it "assigns the tutor_schedule as @tutor_schedule" do
        tutor_schedule = TutorSchedule.create! valid_attributes
        put :update, params: {:id => tutor_schedule.to_param, :tutor_schedule => invalid_attributes}
        expect(assigns(:tutor_schedule)).to eq(tutor_schedule)
      end

      it "re-renders the 'edit' template" do
        tutor_schedule = TutorSchedule.create! valid_attributes
        put :update, params: {:id => tutor_schedule.to_param, :tutor_schedule => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested tutor_schedule" do
      tutor_schedule = TutorSchedule.create! valid_attributes
      expect {
        delete :destroy, params: {:id => tutor_schedule.to_param}
      }.to change(TutorSchedule, :count).by(-1)
    end

    it "redirects to the tutor_schedules list" do
      tutor_schedule = TutorSchedule.create! valid_attributes
      delete :destroy, params: {:id => tutor_schedule.to_param}
      expect(response).to redirect_to(dashboard_count_tutor_appointments_path(selection: 'Log Hours'))
    end
  end

end
