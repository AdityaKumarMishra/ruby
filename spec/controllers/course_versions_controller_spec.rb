require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CourseVersionsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # CourseVersion. As you add validations to CourseVersion, be sure to
  # adjust the attributes here as well.
  login_superadmin
  let!(:course) {FactoryGirl.create(:course)}
  let!(:course_version) { FactoryGirl.create(:course_version, course: course) }
  let(:valid_attributes) { FactoryGirl.attributes_for(:course_version,course_id: course.id)}
  let(:invalid_attributes) { FactoryGirl.attributes_for(:course_version,course_id:course.to_param,versions_number: nil) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CourseVersionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  # #Tutor Authorization
  # let!(:tutor) { FactoryGirl.create(:user, :tutor) }
  # before do
  #   subject.stub(current_user: tutor, authenticate_user!: true)
  #   @course_version = course_version.new
  # end

  describe "GET #index" do
    it "assigns all course_versions as @course_versions" do
      get :index, {course_id: course.id}, valid_session
      expect(assigns(:course_versions)).to eq([course_version])
    end
  end

  describe "GET #show" do
    it "assigns the requested course_version as @course_version" do
      course_version = CourseVersion.create! valid_attributes
      get :show, {course_id: course.to_param,:id => course_version.id}, valid_session
      expect(assigns(:course_version)).to eq(course_version)
    end
  end

  describe "GET #new" do
    it "assigns a new course_version as @course_version" do
      get :new, {course_id: course.id}, valid_session
      expect(assigns(:course_version)).to be_a_new(CourseVersion)
    end
  end

  describe "GET #edit" do
    it "assigns the requested course_version as @course_version" do
      course_version = CourseVersion.create! valid_attributes
      get :edit, {course_id: course.to_param,:id => course_version.to_param}, valid_session
      expect(assigns(:course_version)).to eq(course_version)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new CourseVersion" do
        expect {
          post :create, {course_id: course.to_param,:course_version => valid_attributes}, valid_session
        }.to change(CourseVersion, :count).by(1)
      end

      it "assigns a newly created course_version as @course_version" do
        post :create, {course_id: course.to_param,:course_version => valid_attributes}, valid_session
        expect(assigns(:course_version)).to be_a(CourseVersion)
        expect(assigns(:course_version)).to be_persisted
      end

      it "redirects to the created course_version" do
        post :create, {course_id: course.to_param,:course_version => valid_attributes}, valid_session
        expect(response).to redirect_to(course_course_version_path(course.to_param,CourseVersion.last))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved course_version as @course_version" do
        pending 'Nested attributes'
        post :create, {course_id: course.to_param,:course_version => invalid_attributes}, valid_session
        expect(assigns(:course_version)).to be_a_new(CourseVersion)
      end

      xit "re-renders the 'new' template" do
        post :create, {course_id: course.to_param,:course_version => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested course_version" do
        course_version = CourseVersion.create! valid_attributes
        put :update, {:id => course_version.to_param, :course_version => new_attributes}, valid_session
        course_version.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested course_version as @course_version" do
        course_version = CourseVersion.create! valid_attributes
        put :update, {course_id: course.to_param,:id => course_version.to_param, :course_version => valid_attributes}, valid_session
        expect(assigns(:course_version)).to eq(course_version)
      end

      it "redirects to the course_version" do
        course_version = CourseVersion.create! valid_attributes
        put :update, {course_id:course.to_param ,:id => course_version.to_param, :course_version => valid_attributes}, valid_session
        expect(response).to redirect_to(course_course_version_path(course,course_version))
      end
    end

    context "with invalid params" do
      skip "to be implemented"
      it "assigns the course_version as @course_version" do
        course_version = CourseVersion.create! valid_attributes
        put :update, {course_id: course.to_param,:id => course_version.to_param, :course_version => invalid_attributes}, valid_session
        expect(assigns(:course_version)).to eq(course_version)
      end

      xit "re-renders the 'edit' template" do
        course_version = CourseVersion.create! valid_attributes
        put :update, {course_id: course.to_param,:id => course_version.to_param, :course_version => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested course_version" do
      course_version = CourseVersion.create! valid_attributes
      expect {
        delete :destroy, {course_id: course.to_param,:id => course_version.to_param}, valid_session
      }.to change(CourseVersion, :count).by(-1)
    end

    it "redirects to the course_versions list" do
      course_version = CourseVersion.create! valid_attributes
      delete :destroy, {course_id: course.to_param,:id => course_version.to_param}, valid_session
      expect(response).to redirect_to(course_course_versions_url(course.to_param))
    end
  end

end
