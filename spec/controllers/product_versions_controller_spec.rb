require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ProductVersionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # ProductVersion. As you add validations to ProductVersion, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let(:user) { FactoryGirl.create(:user, :manager) }

  before do
    sign_in user
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProductVersionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:product_version) { FactoryGirl.create :product_version }
  let(:master_feature) { FactoryGirl.create(:master_feature) }

  let(:pvfp) do
    FactoryGirl.create(:product_version_feature_price,
                       master_feature: master_feature, product_version: productVer)
  end
  # let(:feature) { FactoryGirl.create :feature, product_version: product_version }

  describe "GET #index" do
    it "assigns all product_versions as @product_versions" do
      product_version # Create a product version

      get :index, {}, valid_session
      expect(assigns(:product_versions).first.id).to eq(product_version.id)
    end
  end

  describe "GET #show" do
    it "assigns the requested product_version as @product_version" do
      get :show, {:id => product_version.to_param}, valid_session
      expect(assigns(:product_version).id).to eq(product_version.id)
    end
  end

  describe "GET #new" do
    let(:product_line) { create(:product_line) }

    it "assigns a new product_version as @product_version" do
      get :new, { product_line_id: product_line.id }, valid_session
      expect(assigns(:product_version)).to be_a_new(ProductVersion)
    end
  end

  describe "GET #edit" do
    it "assigns the requested product_version as @product_version" do
      get :edit, {:id => product_version.to_param}, valid_session
      expect(assigns(:product_version).id).to eq(product_version.id)
    end

    # it "correctly remembers value for purchaseable" do
    #   feature.enabled = :purchasable
    #   feature.save
    #   get :edit, {:id => product_version.to_param}, valid_session
    #   expect { feature.reload }.not_to raise_error
    # end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new ProductVersion" do
        expect {
          post :create, {:product_version => valid_attributes}, valid_session
        }.to change(ProductVersion, :count).by(1)
      end

      it "assigns a newly created product_version as @product_version" do
        post :create, {:product_version => valid_attributes}, valid_session
        expect(assigns(:product_version)).to be_a(ProductVersion)
        expect(assigns(:product_version)).to be_persisted
      end

      it "redirects to the created product_version" do
        post :create, {:product_version => valid_attributes}, valid_session
        expect(response).to redirect_to(ProductVersion.last)
      end
    end

    context 'create umat product version' do
      #let(:umat_attributes) { FactoryGirl.attributes_for(:product_version, type: 'UmatReady') }
      it 'create new umat product version' do
        post :create, {:product_version => valid_attributes}, valid_session
        expect(response).to change(ProductVersion, :count).by(1)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved product_version as @product_version" do
        post :create, {:product_version => invalid_attributes}, valid_session
        expect(assigns(:product_version)).to be_a_new(ProductVersion)
      end

      it "re-renders the 'new' template" do
        post :create, {:product_version => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested product_version" do

        put :update, {:id => product_version.to_param, :product_version => new_attributes}, valid_session
        product_version.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested product_version as @product_version" do

        put :update, {:id => product_version.to_param, :product_version => valid_attributes}, valid_session
        expect(assigns(:product_version)).to eq(product_version)
      end

      it "redirects to the product_version" do

        put :update, {:id => product_version.to_param, :product_version => valid_attributes}, valid_session
        expect(response).to redirect_to(product_version)
      end
    end

    context "update umat product version" do
      let!(:umat_product_version) { FactoryGirl.create(:product_version, type: 'UmatReady') }
      feature_attributes = {name: 'Feature', enabled: :purchasable, price: 500, tag_ids: []}
      let(:valid_umat_param) { {price: 10, name: 'Test Umat', features_attributes: {0 => feature_attributes}} }
      it 'update umat product version successfully' do
        put :update, { id: umat_product_version.id, umat_ready: valid_umat_param, product_version: valid_attributes}, valid_session
        expect(umat_product_version.reload.name).to eq(valid_umat_param[:name])
        expect(umat_product_version.reload.price).to eq(valid_umat_param[:price])
      end
    end

    context "with invalid params" do
      it "assigns the product_version as @product_version" do

        put :update, {:id => product_version.to_param, :product_version => invalid_attributes}, valid_session
        expect(assigns(:product_version)).to eq(product_version)
      end

      it "re-renders the 'edit' template" do

        put :update, {:id => product_version.to_param, :product_version => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested product_version" do
      product_version # Ensure a product version is created

      expect {
        delete :destroy, {:id => product_version.to_param}, valid_session
      }.to change(ProductVersion, :count).by(-1)
    end

    it "redirects to the product_versions list" do

      delete :destroy, {:id => product_version.to_param}, valid_session
      expect(response).to redirect_to(product_versions_url)
    end
  end

  describe "private transform_courses" do
    let(:course1) { FactoryGirl.create(:course, enrolment_end_date: (Time.zone.now.beginning_of_day - 14.days), remain_visible: true) }
    let(:course2) { FactoryGirl.create(:course, enrolment_end_date: (Time.zone.now.beginning_of_day - 10.days), remain_visible: true) }
    let(:course3) { FactoryGirl.create(:course, enrolment_end_date: (Time.zone.now.beginning_of_day + 10.days), remain_visible: false) }
    let(:course4) { FactoryGirl.create(:course, enrolment_end_date: (Time.zone.now.beginning_of_day + 14.days), remain_visible: false) }

    let!(:courses) do
      [course1, course2, course3, course4]
    end

    it 'transforms courses in proper order' do
      expect(controller.send(:transform_courses, courses)).to eq([course3, course4, course1, course2])
    end
  end
end
