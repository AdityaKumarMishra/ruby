require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe McqsController, type: :controller do
  login_superadmin
  # This should return the minimal set of attributes required to create a valid
  # Mcq. As you add validations to Mcq, be sure to
  # adjust the attributes here as well.
  let!(:mcq_stem) { FactoryGirl.create(:mcq_stem) }
  let!(:tag) { FactoryGirl.create :tag }
  let(:valid_attributes) do
    FactoryGirl.attributes_for(:mcq, mcq_stem_id: mcq_stem.to_param,
                                     mcq_answers_attributes: [{ answer: 'MyText', correct: true }],
                                     tagging_attributes: { tag_id: tag.id })
  end

  let(:invalid_attributes) { FactoryGirl.attributes_for(:mcq, question: '') }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # McQsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    let!(:mcq_with_set2) { FactoryGirl.create(:mcq, mcq_stem: mcq_stem) }
    let!(:mcq_with_set) { FactoryGirl.create(:mcq, mcq_stem: mcq_stem) }

    describe 'with mcq_stem' do
      it 'assigns mcqs belonging to mcq_stem as @mcqs' do
        get :index, { mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(assigns(:mcqs)).to eq([mcq_with_set2, mcq_with_set])
      end
    end
  end

  describe 'GET #show' do
    it 'assigns the requested mcq as @mcq' do
      mcq = Mcq.create! valid_attributes
      get :show, { id: mcq.to_param, mcq_stem_id: mcq_stem.to_param }, valid_session
      expect(assigns(:mcq)).to eq(mcq)
    end
  end

  describe 'GET #new' do
    it 'assigns a new mcq as @mcq' do
      get :new, { mcq_stem_id: mcq_stem.to_param }, valid_session
      expect(assigns(:mcq)).to be_a_new(Mcq)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested mcq as @mcq' do
      mcq = Mcq.create! valid_attributes
      get :edit, { id: mcq.to_param, mcq_stem_id: mcq_stem.to_param }, valid_session
      expect(assigns(:mcq)).to eq(mcq)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Mcq' do
        expect do
          post :create, { mcq: valid_attributes, mcq_stem_id: mcq_stem.to_param }, valid_session
        end.to change(Mcq, :count).by(1).and change(McqAnswer, :count).by(1)
          .and change(Tagging, :count).by(1)
      end

      it 'assigns a newly created mcq as @mcq' do
        post :create, { mcq: valid_attributes, mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(assigns(:mcq)).to be_a(Mcq)
        expect(assigns(:mcq)).to be_persisted
      end

      it 'redirects to the mcq list for the mcq stem' do
        post :create, { mcq: valid_attributes, mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(response).to redirect_to(mcq_stem_mcqs_path(mcq_stem))
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved mcq as @mcq' do
        post :create, { mcq: invalid_attributes, mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(assigns(:mcq)).to be_a_new(Mcq)
      end

      it "re-renders the 'new' template" do
        post :create, { mcq: invalid_attributes, mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        FactoryGirl.attributes_for(:mcq, question: 'new Content', examinable: true)
      end

      it 'updates the requested mcq' do
        mcq = Mcq.create! valid_attributes
        put :update, { id: mcq.to_param, mcq: new_attributes,
                       mcq_stem_id: mcq_stem.to_param }, valid_session
        mcq.reload
        expect(mcq.examinable).to be(true)
      end

      it 'assigns the requested mcq as @mcq' do
        mcq = Mcq.create! valid_attributes
        put :update, { id: mcq.to_param, mcq: valid_attributes,
                       mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(assigns(:mcq)).to eq(mcq)
      end

      it 'redirects to the mcq' do
        mcq = Mcq.create! valid_attributes
        put :update, { id: mcq.to_param, mcq: new_attributes,
                       mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(response).to redirect_to(mcq_stem_path(mcq_stem))
      end
    end

    context 'with invalid params' do
      it 'assigns the mcq as @mcq' do
        mcq = Mcq.create! valid_attributes
        put :update, { id: mcq.to_param, mcq: invalid_attributes,
                       mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(assigns(:mcq)).to eq(mcq)
      end

      it "re-renders the 'edit' template" do
        mcq = Mcq.create! valid_attributes
        put :update, { id: mcq.to_param, mcq: invalid_attributes,
                       mcq_stem_id: mcq_stem.to_param }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested mcq' do
      mcq = Mcq.create! valid_attributes
      expect do
        delete :destroy, { id: mcq.to_param, mcq_stem_id: mcq_stem.to_param }, valid_session
      end.to change(Mcq, :count).by(-1).and change(McqAnswer, :count).by(0)
        .and change(Tagging, :count).by(-1)
    end

    it 'redirects to the mcqs list' do
      mcq = Mcq.create! valid_attributes
      delete :destroy, { id: mcq.to_param, mcq_stem_id: mcq_stem.to_param }, valid_session
      expect(response).to redirect_to(mcq_stem_mcqs_path(mcq_stem))
    end
  end
end
